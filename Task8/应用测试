# Web应用测试
## 单元测试：TestNG、Junit 或Rspec等与构建技术匹配
+ 测试目的
我如何知道代码运行是否正确呢？我要如何对它进行测试？还有哪些方面可能会发生错误？这个问题是否会在其他的地方出现呢？
+ 一般原则
测试任务可能失败的地方。测试任何已经失败的地方。对于新加的代码，在被证明正确之前，都可能是有问题的。
至少编写和产品代码一样多的测试代码。针对每次编译都做局部测试。签入代码之前做全局测试。
+ 好的测试是一个TRIP
Automatic（自动的）。
Thorough（全面的）。
Repeatable（可重复的）。
Independent（独立的）。
Professional（专业的）。
+ Junit测试的快速入门
在Spring+SpringMVC+MyBatis的基础架构上，从传统的Dao、Service、Controller，由下往上针对这三层完成一次完整的测试。
项目结构解析：明确每个文件的目的和作用，分别进行测试。
代码解析：在src/test/下创建一个测试的基类，在这里设置了事务回滚，测试数据不会污染数据库。当然，并不是完全不对数据库造成影响。如果主键被设置为自动增长时，会发现ID是不连续的，且在不断增长，所以这并不是真正意义上的无污染。
## 功能测试：设计测试用例进行功能测试
+ **链接测试**
链接是web应用系统的一个很重要的特征，主要是用于页面之间切换跳转，指导用户去一些不知道地址的页面的主要手段，链接测试一般关注三点：
-	链接是否按照既定指示那样，确实链接到了该链接的界面
-	测试该链接所链接的页面是否真的存在
-	保证系统中没有单独存在的页面（即没有链接指向，只能通过正确的URL地址才能访问）
+ **表单测试**
-	这个也可以理解为数据落地；当用户在web应用系统上向服务器提交信息时，就需要使用表单操作，比如，用户注册，登录，信息变更等等；这种情况下，我们必须测试提交信息的完整性，
-	以检验提交给服务器的数据的正确性，当然，这涉及到一些常理性逻辑，比如：出生日期和职业，工作年限是否恰当，所在地省份城市区域间的匹配等，如果设定使用默认值，也需要测试。
+ **导航测试**
作为测试，很多时候都要站在用户的角度去思考，那么，作为一个用户，当他访问一个web的网站或者系统时，会怎么去操作呢？大部分用户都是目的驱动的，当他访问一个网站，会很快的浏览系统，找不到满足自己需求的信息时，会很快离开，很少有用户愿意花时间去熟悉系统的结构，因此，导航测试就显得很重要。
## 性能测试：LoadRunner、HTTPUnit等
LoadRunner，是一种预测系统行为和性能的负载测试工具。通过以模拟上千万用户实施并发负载及实时性能监测的方式来确认和查找问题，LoadRunner能够对整个企业架构进行测试。企业使用LoadRunner能最大限度地缩短测试时间，优化性能和加速应用系统的发布周期。 LoadRunner可适用于各种体系架构的自动负载测试，能预测系统行为并评估系统性能。
主要通过：虚拟用户，真实负载，定位性能，分析结果和重复测试来完成。
## 安全性测试：测试XSS、SQL注入等
SQL注入即是指web应用程序对用户输入数据的合法性没有判断，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。
●SQL注入威胁表现形式可以体现为以下几点：
        ●绕过认证，获得非法权限
        ●猜解后台数据库全部的信息
        ●注入可以借助数据库的存储过程进行提权等操作
●SQL注入攻击的典型手段
        ●判断应用程序是否存在注入漏洞
        ●收集信息、并判断数据库类型
        ●根据注入参数类型，重构SQL语句的原貌
        ●猜解表名、字段名
        ●获取账户信息、攻击web或为下一步攻击做准备
## WebUI测试
也可以理解为图形测试，其中包括图片、动画、边框、颜色、字体、背景、按钮等等。
其中要考虑的几个重点，我做了一个大概的总结：
       + 图片要有明确的用途，代表；图片尺寸尽量小，一般采用JPG或者GIF压缩
       + 页面整体风格是否和系统的用途一致
       + 背景颜色，字体，搭配是否合理

